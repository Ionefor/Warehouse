// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Warehouse.WarehouseManagement.Infrastructure.DbContexts;

#nullable disable

namespace Warehouse.WarehouseManagement.Infrastructure.Migrations
{
    [DbContext(typeof(WarehouseWriteDbContext))]
    partial class WarehouseWriteDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("WarehouseManagement")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Warehouse.WarehouseManagement.Domain.Aggregate.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Warehouse.WarehouseManagement.Domain.Aggregate.Warehouse.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("name");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NotificationEmail", "Warehouse.WarehouseManagement.Domain.Aggregate.Warehouse.NotificationEmail#Email", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(40)
                                .HasColumnType("character varying(40)")
                                .HasColumnName("notification_email");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Size", "Warehouse.WarehouseManagement.Domain.Aggregate.Warehouse.Size#Size", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Height")
                                .HasMaxLength(40)
                                .HasColumnType("double precision")
                                .HasColumnName("height");

                            b1.Property<double>("Length")
                                .HasMaxLength(40)
                                .HasColumnType("double precision")
                                .HasColumnName("length");

                            b1.Property<double>("Width")
                                .HasMaxLength(40)
                                .HasColumnType("double precision")
                                .HasColumnName("width");
                        });

                    b.HasKey("Id")
                        .HasName("pk_warehouses");

                    b.ToTable("warehouses", "WarehouseManagement");
                });

            modelBuilder.Entity("Warehouse.WarehouseManagement.Domain.Entities.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("warehouse_id")
                        .HasColumnType("uuid")
                        .HasColumnName("warehouse_id");

                    b.ComplexProperty<Dictionary<string, object>>("Size", "Warehouse.WarehouseManagement.Domain.Entities.Section.Size#Size", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<double>("Height")
                                .HasMaxLength(40)
                                .HasColumnType("double precision")
                                .HasColumnName("height");

                            b1.Property<double>("Length")
                                .HasMaxLength(40)
                                .HasColumnType("double precision")
                                .HasColumnName("length");

                            b1.Property<double>("Width")
                                .HasMaxLength(40)
                                .HasColumnType("double precision")
                                .HasColumnName("width");
                        });

                    b.HasKey("Id")
                        .HasName("pk_sections");

                    b.HasIndex("warehouse_id")
                        .HasDatabaseName("ix_sections_warehouse_id");

                    b.ToTable("sections", "WarehouseManagement");
                });

            modelBuilder.Entity("Warehouse.WarehouseManagement.Domain.Entities.Section", b =>
                {
                    b.HasOne("Warehouse.WarehouseManagement.Domain.Aggregate.Warehouse", null)
                        .WithMany("Sections")
                        .HasForeignKey("warehouse_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sections_warehouses_warehouse_id");

                    b.OwnsOne("Warehouse.WarehouseManagement.Domain.ValueObjects.SectionRows", "Rows", b1 =>
                        {
                            b1.Property<Guid>("SectionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Values")
                                .HasColumnType("jsonb")
                                .HasColumnName("section_rows");

                            b1.HasKey("SectionId");

                            b1.ToTable("sections", "WarehouseManagement");

                            b1.WithOwner()
                                .HasForeignKey("SectionId")
                                .HasConstraintName("fk_sections_sections_id");
                        });

                    b.Navigation("Rows")
                        .IsRequired();
                });

            modelBuilder.Entity("Warehouse.WarehouseManagement.Domain.Aggregate.Warehouse", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
